"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TmdbApiClient = void 0;
const environments = __importStar(require("./environments.js"));
const core = __importStar(require("./core/index.js"));
const url_join_1 = __importDefault(require("url-join"));
const errors = __importStar(require("./errors/index.js"));
class TmdbApiClient {
    constructor(_options) {
        this._options = _options;
    }
    /**
     *
     *
     * @param {TmdbApi.AuthCreateRequestTokenRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.authCreateRequestToken({
     *         RAW_BODY: "RAW_BODY"
     *     })
     */
    authCreateRequestToken(request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__authCreateRequestToken(request, requestOptions));
    }
    __authCreateRequestToken(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_b = (_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.TmdbApiEnvironment.Default, "4/auth/request_token"),
                method: "POST",
                headers: Object.assign(Object.assign({ "X-Fern-Language": "JavaScript", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, (yield this._getCustomAuthorizationHeaders())), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                body: request,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return {
                    data: _response.body,
                    rawResponse: _response.rawResponse,
                };
            }
            if (_response.error.reason === "status-code") {
                throw new errors.TmdbApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                    rawResponse: _response.rawResponse,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.TmdbApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.TmdbApiTimeoutError("Timeout exceeded when calling POST /4/auth/request_token.");
                case "unknown":
                    throw new errors.TmdbApiError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     *
     *
     * @param {TmdbApi.AuthCreateAccessTokenRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.authCreateAccessToken({
     *         RAW_BODY: "RAW_BODY"
     *     })
     */
    authCreateAccessToken(request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__authCreateAccessToken(request, requestOptions));
    }
    __authCreateAccessToken(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_b = (_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.TmdbApiEnvironment.Default, "4/auth/access_token"),
                method: "POST",
                headers: Object.assign(Object.assign({ "X-Fern-Language": "JavaScript", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, (yield this._getCustomAuthorizationHeaders())), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                body: request,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return {
                    data: _response.body,
                    rawResponse: _response.rawResponse,
                };
            }
            if (_response.error.reason === "status-code") {
                throw new errors.TmdbApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                    rawResponse: _response.rawResponse,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.TmdbApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.TmdbApiTimeoutError("Timeout exceeded when calling POST /4/auth/access_token.");
                case "unknown":
                    throw new errors.TmdbApiError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Log out of a session.
     *
     * @param {TmdbApi.AuthLogoutRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.authLogout({
     *         RAW_BODY: "RAW_BODY"
     *     })
     */
    authLogout(request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__authLogout(request, requestOptions));
    }
    __authLogout(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_b = (_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.TmdbApiEnvironment.Default, "4/auth/access_token"),
                method: "DELETE",
                headers: Object.assign(Object.assign({ "X-Fern-Language": "JavaScript", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, (yield this._getCustomAuthorizationHeaders())), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                body: request,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                throw new errors.TmdbApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                    rawResponse: _response.rawResponse,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.TmdbApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.TmdbApiTimeoutError("Timeout exceeded when calling DELETE /4/auth/access_token.");
                case "unknown":
                    throw new errors.TmdbApiError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Retrieve a list by id.
     *
     * @param {number} listId
     * @param {TmdbApi.ListDetailsRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.listDetails(1)
     */
    listDetails(listId, request = {}, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__listDetails(listId, request, requestOptions));
    }
    __listDetails(listId_1) {
        return __awaiter(this, arguments, void 0, function* (listId, request = {}, requestOptions) {
            var _a, _b;
            const { language, page } = request;
            const _queryParams = {};
            if (language != null) {
                _queryParams["language"] = language;
            }
            if (page != null) {
                _queryParams["page"] = page.toString();
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_b = (_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.TmdbApiEnvironment.Default, `4/list/${encodeURIComponent(listId)}`),
                method: "GET",
                headers: Object.assign(Object.assign({ "X-Fern-Language": "JavaScript", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, (yield this._getCustomAuthorizationHeaders())), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                throw new errors.TmdbApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                    rawResponse: _response.rawResponse,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.TmdbApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.TmdbApiTimeoutError("Timeout exceeded when calling GET /4/list/{list_id}.");
                case "unknown":
                    throw new errors.TmdbApiError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Update the details of a list.
     *
     * @param {number} listId
     * @param {TmdbApi.ListUpdateRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.listUpdate(1, {
     *         RAW_BODY: "RAW_BODY"
     *     })
     */
    listUpdate(listId, request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__listUpdate(listId, request, requestOptions));
    }
    __listUpdate(listId, request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_b = (_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.TmdbApiEnvironment.Default, `4/list/${encodeURIComponent(listId)}`),
                method: "PUT",
                headers: Object.assign(Object.assign({ "X-Fern-Language": "JavaScript", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, (yield this._getCustomAuthorizationHeaders())), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                body: request,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                throw new errors.TmdbApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                    rawResponse: _response.rawResponse,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.TmdbApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.TmdbApiTimeoutError("Timeout exceeded when calling PUT /4/list/{list_id}.");
                case "unknown":
                    throw new errors.TmdbApiError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Create a new list.
     *
     * @param {TmdbApi.ListCreateRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.listCreate({
     *         RAW_BODY: "RAW_BODY"
     *     })
     */
    listCreate(request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__listCreate(request, requestOptions));
    }
    __listCreate(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_b = (_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.TmdbApiEnvironment.Default, "4/list"),
                method: "POST",
                headers: Object.assign(Object.assign({ "X-Fern-Language": "JavaScript", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, (yield this._getCustomAuthorizationHeaders())), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                body: request,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                throw new errors.TmdbApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                    rawResponse: _response.rawResponse,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.TmdbApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.TmdbApiTimeoutError("Timeout exceeded when calling POST /4/list.");
                case "unknown":
                    throw new errors.TmdbApiError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Clear all of the items on a list.
     *
     * @param {number} listId
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.listClear(1)
     */
    listClear(listId, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__listClear(listId, requestOptions));
    }
    __listClear(listId, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_b = (_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.TmdbApiEnvironment.Default, `4/list/${encodeURIComponent(listId)}/clear`),
                method: "GET",
                headers: Object.assign(Object.assign({ "X-Fern-Language": "JavaScript", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, (yield this._getCustomAuthorizationHeaders())), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                throw new errors.TmdbApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                    rawResponse: _response.rawResponse,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.TmdbApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.TmdbApiTimeoutError("Timeout exceeded when calling GET /4/list/{list_id}/clear.");
                case "unknown":
                    throw new errors.TmdbApiError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Delete a list.
     *
     * @param {number} listId
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.listDelete(1)
     */
    listDelete(listId, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__listDelete(listId, requestOptions));
    }
    __listDelete(listId, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_b = (_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.TmdbApiEnvironment.Default, `4/${encodeURIComponent(listId)}`),
                method: "DELETE",
                headers: Object.assign(Object.assign({ "X-Fern-Language": "JavaScript", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, (yield this._getCustomAuthorizationHeaders())), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                throw new errors.TmdbApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                    rawResponse: _response.rawResponse,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.TmdbApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.TmdbApiTimeoutError("Timeout exceeded when calling DELETE /4/{list_id}.");
                case "unknown":
                    throw new errors.TmdbApiError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Add items to a list.
     *
     * @param {number} listId
     * @param {TmdbApi.ListAddItemsRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.listAddItems(1, {
     *         RAW_BODY: "RAW_BODY"
     *     })
     */
    listAddItems(listId, request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__listAddItems(listId, request, requestOptions));
    }
    __listAddItems(listId, request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_b = (_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.TmdbApiEnvironment.Default, `4/list/${encodeURIComponent(listId)}/items`),
                method: "POST",
                headers: Object.assign(Object.assign({ "X-Fern-Language": "JavaScript", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, (yield this._getCustomAuthorizationHeaders())), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                body: request,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                throw new errors.TmdbApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                    rawResponse: _response.rawResponse,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.TmdbApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.TmdbApiTimeoutError("Timeout exceeded when calling POST /4/list/{list_id}/items.");
                case "unknown":
                    throw new errors.TmdbApiError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Update an individual item on a list
     *
     * @param {string} listId
     * @param {TmdbApi.ListUpdateItemsRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.listUpdateItems("list_id", {
     *         RAW_BODY: "RAW_BODY"
     *     })
     */
    listUpdateItems(listId, request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__listUpdateItems(listId, request, requestOptions));
    }
    __listUpdateItems(listId, request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_b = (_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.TmdbApiEnvironment.Default, `4/list/${encodeURIComponent(listId)}/items`),
                method: "PUT",
                headers: Object.assign(Object.assign({ "X-Fern-Language": "JavaScript", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, (yield this._getCustomAuthorizationHeaders())), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                body: request,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                throw new errors.TmdbApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                    rawResponse: _response.rawResponse,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.TmdbApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.TmdbApiTimeoutError("Timeout exceeded when calling PUT /4/list/{list_id}/items.");
                case "unknown":
                    throw new errors.TmdbApiError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Remove items from a list
     *
     * @param {number} listId
     * @param {TmdbApi.ListRemoveItemsRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.listRemoveItems(1, {
     *         RAW_BODY: "RAW_BODY"
     *     })
     */
    listRemoveItems(listId, request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__listRemoveItems(listId, request, requestOptions));
    }
    __listRemoveItems(listId, request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_b = (_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.TmdbApiEnvironment.Default, `4/list/${encodeURIComponent(listId)}/items`),
                method: "DELETE",
                headers: Object.assign(Object.assign({ "X-Fern-Language": "JavaScript", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, (yield this._getCustomAuthorizationHeaders())), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                body: request,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                throw new errors.TmdbApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                    rawResponse: _response.rawResponse,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.TmdbApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.TmdbApiTimeoutError("Timeout exceeded when calling DELETE /4/list/{list_id}/items.");
                case "unknown":
                    throw new errors.TmdbApiError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Check if an item is on a list.
     *
     * @param {number} listId
     * @param {TmdbApi.ListItemStatusRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.listItemStatus(1, {
     *         media_id: 1,
     *         media_type: ""
     *     })
     */
    listItemStatus(listId, request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__listItemStatus(listId, request, requestOptions));
    }
    __listItemStatus(listId, request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const { media_id: mediaId, media_type: mediaType } = request;
            const _queryParams = {};
            _queryParams["media_id"] = mediaId.toString();
            _queryParams["media_type"] = mediaType;
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_b = (_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.TmdbApiEnvironment.Default, `4/list/${encodeURIComponent(listId)}/item_status`),
                method: "GET",
                headers: Object.assign(Object.assign({ "X-Fern-Language": "JavaScript", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, (yield this._getCustomAuthorizationHeaders())), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                throw new errors.TmdbApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                    rawResponse: _response.rawResponse,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.TmdbApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.TmdbApiTimeoutError("Timeout exceeded when calling GET /4/list/{list_id}/item_status.");
                case "unknown":
                    throw new errors.TmdbApiError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Get the custom lists that a user has created.
     *
     * @param {string} accountObjectId
     * @param {TmdbApi.AccountListsRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.accountLists("account_object_id")
     */
    accountLists(accountObjectId, request = {}, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__accountLists(accountObjectId, request, requestOptions));
    }
    __accountLists(accountObjectId_1) {
        return __awaiter(this, arguments, void 0, function* (accountObjectId, request = {}, requestOptions) {
            var _a, _b;
            const { page } = request;
            const _queryParams = {};
            if (page != null) {
                _queryParams["page"] = page.toString();
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_b = (_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.TmdbApiEnvironment.Default, `4/account/${encodeURIComponent(accountObjectId)}/lists`),
                method: "GET",
                headers: Object.assign(Object.assign({ "X-Fern-Language": "JavaScript", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, (yield this._getCustomAuthorizationHeaders())), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                throw new errors.TmdbApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                    rawResponse: _response.rawResponse,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.TmdbApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.TmdbApiTimeoutError("Timeout exceeded when calling GET /4/account/{account_object_id}/lists.");
                case "unknown":
                    throw new errors.TmdbApiError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Get a users list of favourite movies.
     *
     * @param {string} accountObjectId
     * @param {TmdbApi.AccountFavoriteMoviesRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.accountFavoriteMovies("account_object_id")
     */
    accountFavoriteMovies(accountObjectId, request = {}, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__accountFavoriteMovies(accountObjectId, request, requestOptions));
    }
    __accountFavoriteMovies(accountObjectId_1) {
        return __awaiter(this, arguments, void 0, function* (accountObjectId, request = {}, requestOptions) {
            var _a, _b;
            const { page, language, sort_by: sortBy } = request;
            const _queryParams = {};
            if (page != null) {
                _queryParams["page"] = page.toString();
            }
            if (language != null) {
                _queryParams["language"] = language;
            }
            if (sortBy != null) {
                _queryParams["sort_by"] = sortBy;
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_b = (_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.TmdbApiEnvironment.Default, `4/account/${encodeURIComponent(accountObjectId)}/movie/favorites`),
                method: "GET",
                headers: Object.assign(Object.assign({ "X-Fern-Language": "JavaScript", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, (yield this._getCustomAuthorizationHeaders())), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return {
                    data: _response.body,
                    rawResponse: _response.rawResponse,
                };
            }
            if (_response.error.reason === "status-code") {
                throw new errors.TmdbApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                    rawResponse: _response.rawResponse,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.TmdbApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.TmdbApiTimeoutError("Timeout exceeded when calling GET /4/account/{account_object_id}/movie/favorites.");
                case "unknown":
                    throw new errors.TmdbApiError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Get a users list of favourite TV shows.
     *
     * @param {string} accountObjectId
     * @param {TmdbApi.AccountFavoriteTvRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.accountFavoriteTv("account_object_id")
     */
    accountFavoriteTv(accountObjectId, request = {}, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__accountFavoriteTv(accountObjectId, request, requestOptions));
    }
    __accountFavoriteTv(accountObjectId_1) {
        return __awaiter(this, arguments, void 0, function* (accountObjectId, request = {}, requestOptions) {
            var _a, _b;
            const { page, language, sort_by: sortBy } = request;
            const _queryParams = {};
            if (page != null) {
                _queryParams["page"] = page.toString();
            }
            if (language != null) {
                _queryParams["language"] = language;
            }
            if (sortBy != null) {
                _queryParams["sort_by"] = sortBy;
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_b = (_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.TmdbApiEnvironment.Default, `4/account/${encodeURIComponent(accountObjectId)}/tv/favorites`),
                method: "GET",
                headers: Object.assign(Object.assign({ "X-Fern-Language": "JavaScript", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, (yield this._getCustomAuthorizationHeaders())), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                throw new errors.TmdbApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                    rawResponse: _response.rawResponse,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.TmdbApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.TmdbApiTimeoutError("Timeout exceeded when calling GET /4/account/{account_object_id}/tv/favorites.");
                case "unknown":
                    throw new errors.TmdbApiError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Get a users list of recommended TV shows.
     *
     * @param {string} accountObjectId
     * @param {TmdbApi.AccountTvRecommendationsRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.accountTvRecommendations("account_object_id")
     */
    accountTvRecommendations(accountObjectId, request = {}, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__accountTvRecommendations(accountObjectId, request, requestOptions));
    }
    __accountTvRecommendations(accountObjectId_1) {
        return __awaiter(this, arguments, void 0, function* (accountObjectId, request = {}, requestOptions) {
            var _a, _b;
            const { page, language } = request;
            const _queryParams = {};
            if (page != null) {
                _queryParams["page"] = page.toString();
            }
            if (language != null) {
                _queryParams["language"] = language;
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_b = (_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.TmdbApiEnvironment.Default, `4/account/${encodeURIComponent(accountObjectId)}/tv/recommendations`),
                method: "GET",
                headers: Object.assign(Object.assign({ "X-Fern-Language": "JavaScript", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, (yield this._getCustomAuthorizationHeaders())), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return {
                    data: _response.body,
                    rawResponse: _response.rawResponse,
                };
            }
            if (_response.error.reason === "status-code") {
                throw new errors.TmdbApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                    rawResponse: _response.rawResponse,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.TmdbApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.TmdbApiTimeoutError("Timeout exceeded when calling GET /4/account/{account_object_id}/tv/recommendations.");
                case "unknown":
                    throw new errors.TmdbApiError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Get a users list of recommended movies.
     *
     * @param {string} accountObjectId
     * @param {TmdbApi.AccountMovieRecommendationsRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.accountMovieRecommendations("account_object_id")
     */
    accountMovieRecommendations(accountObjectId, request = {}, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__accountMovieRecommendations(accountObjectId, request, requestOptions));
    }
    __accountMovieRecommendations(accountObjectId_1) {
        return __awaiter(this, arguments, void 0, function* (accountObjectId, request = {}, requestOptions) {
            var _a, _b;
            const { page, language } = request;
            const _queryParams = {};
            if (page != null) {
                _queryParams["page"] = page.toString();
            }
            if (language != null) {
                _queryParams["language"] = language;
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_b = (_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.TmdbApiEnvironment.Default, `4/account/${encodeURIComponent(accountObjectId)}/movie/recommendations`),
                method: "GET",
                headers: Object.assign(Object.assign({ "X-Fern-Language": "JavaScript", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, (yield this._getCustomAuthorizationHeaders())), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return {
                    data: _response.body,
                    rawResponse: _response.rawResponse,
                };
            }
            if (_response.error.reason === "status-code") {
                throw new errors.TmdbApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                    rawResponse: _response.rawResponse,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.TmdbApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.TmdbApiTimeoutError("Timeout exceeded when calling GET /4/account/{account_object_id}/movie/recommendations.");
                case "unknown":
                    throw new errors.TmdbApiError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Get a users movie watchlist.
     *
     * @param {string} accountObjectId
     * @param {TmdbApi.AccountMovieWatchlistRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.accountMovieWatchlist("account_object_id")
     */
    accountMovieWatchlist(accountObjectId, request = {}, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__accountMovieWatchlist(accountObjectId, request, requestOptions));
    }
    __accountMovieWatchlist(accountObjectId_1) {
        return __awaiter(this, arguments, void 0, function* (accountObjectId, request = {}, requestOptions) {
            var _a, _b;
            const { page, language, sort_by: sortBy } = request;
            const _queryParams = {};
            if (page != null) {
                _queryParams["page"] = page.toString();
            }
            if (language != null) {
                _queryParams["language"] = language;
            }
            if (sortBy != null) {
                _queryParams["sort_by"] = sortBy;
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_b = (_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.TmdbApiEnvironment.Default, `4/account/${encodeURIComponent(accountObjectId)}/movie/watchlist`),
                method: "GET",
                headers: Object.assign(Object.assign({ "X-Fern-Language": "JavaScript", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, (yield this._getCustomAuthorizationHeaders())), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return {
                    data: _response.body,
                    rawResponse: _response.rawResponse,
                };
            }
            if (_response.error.reason === "status-code") {
                throw new errors.TmdbApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                    rawResponse: _response.rawResponse,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.TmdbApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.TmdbApiTimeoutError("Timeout exceeded when calling GET /4/account/{account_object_id}/movie/watchlist.");
                case "unknown":
                    throw new errors.TmdbApiError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Get a users TV watchlist.
     *
     * @param {string} accountObjectId
     * @param {TmdbApi.AccountTvWatchlistRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.accountTvWatchlist("account_object_id")
     */
    accountTvWatchlist(accountObjectId, request = {}, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__accountTvWatchlist(accountObjectId, request, requestOptions));
    }
    __accountTvWatchlist(accountObjectId_1) {
        return __awaiter(this, arguments, void 0, function* (accountObjectId, request = {}, requestOptions) {
            var _a, _b;
            const { page, language, sort_by: sortBy } = request;
            const _queryParams = {};
            if (page != null) {
                _queryParams["page"] = page.toString();
            }
            if (language != null) {
                _queryParams["language"] = language;
            }
            if (sortBy != null) {
                _queryParams["sort_by"] = sortBy;
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_b = (_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.TmdbApiEnvironment.Default, `4/account/${encodeURIComponent(accountObjectId)}/tv/watchlist`),
                method: "GET",
                headers: Object.assign(Object.assign({ "X-Fern-Language": "JavaScript", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, (yield this._getCustomAuthorizationHeaders())), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                throw new errors.TmdbApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                    rawResponse: _response.rawResponse,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.TmdbApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.TmdbApiTimeoutError("Timeout exceeded when calling GET /4/account/{account_object_id}/tv/watchlist.");
                case "unknown":
                    throw new errors.TmdbApiError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Get a users rated movies.
     *
     * @param {string} accountObjectId
     * @param {TmdbApi.AccountRatedMoviesRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.accountRatedMovies("account_object_id")
     */
    accountRatedMovies(accountObjectId, request = {}, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__accountRatedMovies(accountObjectId, request, requestOptions));
    }
    __accountRatedMovies(accountObjectId_1) {
        return __awaiter(this, arguments, void 0, function* (accountObjectId, request = {}, requestOptions) {
            var _a, _b;
            const { page, language, sort_by: sortBy } = request;
            const _queryParams = {};
            if (page != null) {
                _queryParams["page"] = page.toString();
            }
            if (language != null) {
                _queryParams["language"] = language;
            }
            if (sortBy != null) {
                _queryParams["sort_by"] = sortBy;
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_b = (_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.TmdbApiEnvironment.Default, `4/account/${encodeURIComponent(accountObjectId)}/movie/rated`),
                method: "GET",
                headers: Object.assign(Object.assign({ "X-Fern-Language": "JavaScript", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, (yield this._getCustomAuthorizationHeaders())), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                throw new errors.TmdbApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                    rawResponse: _response.rawResponse,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.TmdbApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.TmdbApiTimeoutError("Timeout exceeded when calling GET /4/account/{account_object_id}/movie/rated.");
                case "unknown":
                    throw new errors.TmdbApiError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Get a users rated TV shows.
     *
     * @param {string} accountObjectId
     * @param {TmdbApi.AccountRatedTvRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.accountRatedTv("account_object_id")
     */
    accountRatedTv(accountObjectId, request = {}, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__accountRatedTv(accountObjectId, request, requestOptions));
    }
    __accountRatedTv(accountObjectId_1) {
        return __awaiter(this, arguments, void 0, function* (accountObjectId, request = {}, requestOptions) {
            var _a, _b;
            const { page, language, sort_by: sortBy } = request;
            const _queryParams = {};
            if (page != null) {
                _queryParams["page"] = page.toString();
            }
            if (language != null) {
                _queryParams["language"] = language;
            }
            if (sortBy != null) {
                _queryParams["sort_by"] = sortBy;
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_b = (_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.TmdbApiEnvironment.Default, `4/account/${encodeURIComponent(accountObjectId)}/tv/rated`),
                method: "GET",
                headers: Object.assign(Object.assign({ "X-Fern-Language": "JavaScript", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, (yield this._getCustomAuthorizationHeaders())), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                throw new errors.TmdbApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                    rawResponse: _response.rawResponse,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.TmdbApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.TmdbApiTimeoutError("Timeout exceeded when calling GET /4/account/{account_object_id}/tv/rated.");
                case "unknown":
                    throw new errors.TmdbApiError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     *
     *
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.gettingStarted()
     */
    gettingStarted(requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__gettingStarted(requestOptions));
    }
    __gettingStarted(requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const _response = yield core.fetcher({
                url: (_b = (_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.TmdbApiEnvironment.Default,
                method: "POST",
                headers: Object.assign(Object.assign({ "X-Fern-Language": "JavaScript", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, (yield this._getCustomAuthorizationHeaders())), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: undefined, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                throw new errors.TmdbApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                    rawResponse: _response.rawResponse,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.TmdbApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.TmdbApiTimeoutError("Timeout exceeded when calling POST /.");
                case "unknown":
                    throw new errors.TmdbApiError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    _getCustomAuthorizationHeaders() {
        return __awaiter(this, void 0, void 0, function* () {
            const apiKeyValue = yield core.Supplier.get(this._options.apiKey);
            return { Authorization: `Bearer ${apiKeyValue}` };
        });
    }
}
exports.TmdbApiClient = TmdbApiClient;
