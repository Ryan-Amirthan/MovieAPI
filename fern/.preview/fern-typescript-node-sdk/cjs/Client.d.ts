/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "./environments.js";
import * as core from "./core/index.js";
import * as TmdbApi from "./api/index.js";
export declare namespace TmdbApiClient {
    interface Options {
        environment?: core.Supplier<environments.TmdbApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class TmdbApiClient {
    protected readonly _options: TmdbApiClient.Options;
    constructor(_options: TmdbApiClient.Options);
    /**
     *
     *
     * @param {TmdbApi.AuthCreateRequestTokenRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.authCreateRequestToken({
     *         RAW_BODY: "RAW_BODY"
     *     })
     */
    authCreateRequestToken(request: TmdbApi.AuthCreateRequestTokenRequest, requestOptions?: TmdbApiClient.RequestOptions): core.HttpResponsePromise<TmdbApi.AuthCreateRequestTokenResponse>;
    private __authCreateRequestToken;
    /**
     *
     *
     * @param {TmdbApi.AuthCreateAccessTokenRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.authCreateAccessToken({
     *         RAW_BODY: "RAW_BODY"
     *     })
     */
    authCreateAccessToken(request: TmdbApi.AuthCreateAccessTokenRequest, requestOptions?: TmdbApiClient.RequestOptions): core.HttpResponsePromise<TmdbApi.AuthCreateAccessTokenResponse>;
    private __authCreateAccessToken;
    /**
     * Log out of a session.
     *
     * @param {TmdbApi.AuthLogoutRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.authLogout({
     *         RAW_BODY: "RAW_BODY"
     *     })
     */
    authLogout(request: TmdbApi.AuthLogoutRequest, requestOptions?: TmdbApiClient.RequestOptions): core.HttpResponsePromise<TmdbApi.AuthLogoutResponse>;
    private __authLogout;
    /**
     * Retrieve a list by id.
     *
     * @param {number} listId
     * @param {TmdbApi.ListDetailsRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.listDetails(1)
     */
    listDetails(listId: number, request?: TmdbApi.ListDetailsRequest, requestOptions?: TmdbApiClient.RequestOptions): core.HttpResponsePromise<TmdbApi.ListDetailsResponse>;
    private __listDetails;
    /**
     * Update the details of a list.
     *
     * @param {number} listId
     * @param {TmdbApi.ListUpdateRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.listUpdate(1, {
     *         RAW_BODY: "RAW_BODY"
     *     })
     */
    listUpdate(listId: number, request: TmdbApi.ListUpdateRequest, requestOptions?: TmdbApiClient.RequestOptions): core.HttpResponsePromise<TmdbApi.ListUpdateResponse>;
    private __listUpdate;
    /**
     * Create a new list.
     *
     * @param {TmdbApi.ListCreateRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.listCreate({
     *         RAW_BODY: "RAW_BODY"
     *     })
     */
    listCreate(request: TmdbApi.ListCreateRequest, requestOptions?: TmdbApiClient.RequestOptions): core.HttpResponsePromise<TmdbApi.ListCreateResponse>;
    private __listCreate;
    /**
     * Clear all of the items on a list.
     *
     * @param {number} listId
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.listClear(1)
     */
    listClear(listId: number, requestOptions?: TmdbApiClient.RequestOptions): core.HttpResponsePromise<TmdbApi.ListClearResponse>;
    private __listClear;
    /**
     * Delete a list.
     *
     * @param {number} listId
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.listDelete(1)
     */
    listDelete(listId: number, requestOptions?: TmdbApiClient.RequestOptions): core.HttpResponsePromise<TmdbApi.ListDeleteResponse>;
    private __listDelete;
    /**
     * Add items to a list.
     *
     * @param {number} listId
     * @param {TmdbApi.ListAddItemsRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.listAddItems(1, {
     *         RAW_BODY: "RAW_BODY"
     *     })
     */
    listAddItems(listId: number, request: TmdbApi.ListAddItemsRequest, requestOptions?: TmdbApiClient.RequestOptions): core.HttpResponsePromise<TmdbApi.ListAddItemsResponse>;
    private __listAddItems;
    /**
     * Update an individual item on a list
     *
     * @param {string} listId
     * @param {TmdbApi.ListUpdateItemsRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.listUpdateItems("list_id", {
     *         RAW_BODY: "RAW_BODY"
     *     })
     */
    listUpdateItems(listId: string, request: TmdbApi.ListUpdateItemsRequest, requestOptions?: TmdbApiClient.RequestOptions): core.HttpResponsePromise<TmdbApi.ListUpdateItemsResponse>;
    private __listUpdateItems;
    /**
     * Remove items from a list
     *
     * @param {number} listId
     * @param {TmdbApi.ListRemoveItemsRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.listRemoveItems(1, {
     *         RAW_BODY: "RAW_BODY"
     *     })
     */
    listRemoveItems(listId: number, request: TmdbApi.ListRemoveItemsRequest, requestOptions?: TmdbApiClient.RequestOptions): core.HttpResponsePromise<TmdbApi.ListRemoveItemsResponse>;
    private __listRemoveItems;
    /**
     * Check if an item is on a list.
     *
     * @param {number} listId
     * @param {TmdbApi.ListItemStatusRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.listItemStatus(1, {
     *         media_id: 1,
     *         media_type: ""
     *     })
     */
    listItemStatus(listId: number, request: TmdbApi.ListItemStatusRequest, requestOptions?: TmdbApiClient.RequestOptions): core.HttpResponsePromise<TmdbApi.ListItemStatusResponse>;
    private __listItemStatus;
    /**
     * Get the custom lists that a user has created.
     *
     * @param {string} accountObjectId
     * @param {TmdbApi.AccountListsRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.accountLists("account_object_id")
     */
    accountLists(accountObjectId: string, request?: TmdbApi.AccountListsRequest, requestOptions?: TmdbApiClient.RequestOptions): core.HttpResponsePromise<TmdbApi.AccountListsResponse>;
    private __accountLists;
    /**
     * Get a users list of favourite movies.
     *
     * @param {string} accountObjectId
     * @param {TmdbApi.AccountFavoriteMoviesRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.accountFavoriteMovies("account_object_id")
     */
    accountFavoriteMovies(accountObjectId: string, request?: TmdbApi.AccountFavoriteMoviesRequest, requestOptions?: TmdbApiClient.RequestOptions): core.HttpResponsePromise<TmdbApi.AccountFavoriteMoviesResponse>;
    private __accountFavoriteMovies;
    /**
     * Get a users list of favourite TV shows.
     *
     * @param {string} accountObjectId
     * @param {TmdbApi.AccountFavoriteTvRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.accountFavoriteTv("account_object_id")
     */
    accountFavoriteTv(accountObjectId: string, request?: TmdbApi.AccountFavoriteTvRequest, requestOptions?: TmdbApiClient.RequestOptions): core.HttpResponsePromise<TmdbApi.AccountFavoriteTvResponse>;
    private __accountFavoriteTv;
    /**
     * Get a users list of recommended TV shows.
     *
     * @param {string} accountObjectId
     * @param {TmdbApi.AccountTvRecommendationsRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.accountTvRecommendations("account_object_id")
     */
    accountTvRecommendations(accountObjectId: string, request?: TmdbApi.AccountTvRecommendationsRequest, requestOptions?: TmdbApiClient.RequestOptions): core.HttpResponsePromise<TmdbApi.AccountTvRecommendationsResponse>;
    private __accountTvRecommendations;
    /**
     * Get a users list of recommended movies.
     *
     * @param {string} accountObjectId
     * @param {TmdbApi.AccountMovieRecommendationsRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.accountMovieRecommendations("account_object_id")
     */
    accountMovieRecommendations(accountObjectId: string, request?: TmdbApi.AccountMovieRecommendationsRequest, requestOptions?: TmdbApiClient.RequestOptions): core.HttpResponsePromise<TmdbApi.AccountMovieRecommendationsResponse>;
    private __accountMovieRecommendations;
    /**
     * Get a users movie watchlist.
     *
     * @param {string} accountObjectId
     * @param {TmdbApi.AccountMovieWatchlistRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.accountMovieWatchlist("account_object_id")
     */
    accountMovieWatchlist(accountObjectId: string, request?: TmdbApi.AccountMovieWatchlistRequest, requestOptions?: TmdbApiClient.RequestOptions): core.HttpResponsePromise<TmdbApi.AccountMovieWatchlistResponse>;
    private __accountMovieWatchlist;
    /**
     * Get a users TV watchlist.
     *
     * @param {string} accountObjectId
     * @param {TmdbApi.AccountTvWatchlistRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.accountTvWatchlist("account_object_id")
     */
    accountTvWatchlist(accountObjectId: string, request?: TmdbApi.AccountTvWatchlistRequest, requestOptions?: TmdbApiClient.RequestOptions): core.HttpResponsePromise<TmdbApi.AccountTvWatchlistResponse>;
    private __accountTvWatchlist;
    /**
     * Get a users rated movies.
     *
     * @param {string} accountObjectId
     * @param {TmdbApi.AccountRatedMoviesRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.accountRatedMovies("account_object_id")
     */
    accountRatedMovies(accountObjectId: string, request?: TmdbApi.AccountRatedMoviesRequest, requestOptions?: TmdbApiClient.RequestOptions): core.HttpResponsePromise<TmdbApi.AccountRatedMoviesResponse>;
    private __accountRatedMovies;
    /**
     * Get a users rated TV shows.
     *
     * @param {string} accountObjectId
     * @param {TmdbApi.AccountRatedTvRequest} request
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.accountRatedTv("account_object_id")
     */
    accountRatedTv(accountObjectId: string, request?: TmdbApi.AccountRatedTvRequest, requestOptions?: TmdbApiClient.RequestOptions): core.HttpResponsePromise<TmdbApi.AccountRatedTvResponse>;
    private __accountRatedTv;
    /**
     *
     *
     * @param {TmdbApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.gettingStarted()
     */
    gettingStarted(requestOptions?: TmdbApiClient.RequestOptions): core.HttpResponsePromise<void>;
    private __gettingStarted;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
